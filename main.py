import os
import time
import threading
import schedule
from datetime import datetime, timedelta
from dotenv import load_dotenv
import telebot
from telebot import types
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

subscribed_users = set()

test_time = (datetime.now() + timedelta(minutes=2)).strftime("%H:%M")
WATER_REMINDER_TIMES = ["09:00", "13:00", "15:00", "17:00", "23:00", test_time]
WATER_REMINDER_MESSAGE = "üíß –í—Ä–µ–º—è –ø–∏—Ç—å –≤–æ–¥—É! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞."

BOT_VERSION = "1.0.0"
BOT_AUTHOR = "ALINASUSHCHENKO"
BOT_PURPOSE = "–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–∏—Ç—å–µ –≤–æ–¥—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è"

bot = telebot.TeleBot(TOKEN)
logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")


class WaterReminderScheduler:
    def __init__(self, bot_instance):
        self.bot = bot_instance
        self.setup_schedule()

    def setup_schedule(self):
        for reminder_time in WATER_REMINDER_TIMES:
            schedule.every().day.at(reminder_time).do(self.send_water_reminder)
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∞ {reminder_time}")

    def send_water_reminder(self):
        if not subscribed_users:
            logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            return

        current_time = datetime.now().strftime("%H:%M")
        user_count = len(subscribed_users)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ {current_time} –¥–ª—è {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        success_count = 0
        error_count = 0

        for chat_id in subscribed_users.copy():
            try:
                self.bot.send_message(chat_id, WATER_REMINDER_MESSAGE)
                success_count += 1
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            except Exception as e:
                error_count += 1
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} —Å –æ—à–∏–±–∫–∞–º–∏")

    def get_next_reminder_time(self):
        current_time = datetime.now()

        for time_str in WATER_REMINDER_TIMES:
            reminder_time = datetime.strptime(time_str, "%H:%M").replace(
                year=current_time.year,
                month=current_time.month,
                day=current_time.day
            )

            if reminder_time > current_time:
                return reminder_time

        return datetime.strptime(WATER_REMINDER_TIMES[0], "%H:%M").replace(
            year=current_time.year,
            month=current_time.month,
            day=current_time.day + 1
        )

    def run(self):
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        print("üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        while True:
            schedule.run_pending()
            time.sleep(30)


def make_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("/about", "/ping")
    keyboard.row("/hide", "/show")
    keyboard.row("/help", "/confirm")
    return keyboard


def make_confirm_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–î–∞", callback_data="confirm:yes"),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="confirm:no"),
        types.InlineKeyboardButton("–ü–æ–∑–∂–µ", callback_data="confirm:later"),
        types.InlineKeyboardButton("–ù–µ —É–≤–µ—Ä–µ–Ω", callback_data="confirm:unsure")
    )
    return keyboard


scheduler = WaterReminderScheduler(bot)
scheduler_thread = threading.Thread(target=scheduler.run, daemon=True)
scheduler_thread.start()


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    welcome_text = (
        "üíß Water Reminder Bot üíß\n\n"
        "–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –ø–∏—Ç—å –≤–æ–¥—É –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:\n"
        "‚Ä¢ 09:00 - –£—Ç—Ä–æ\n‚Ä¢ 13:00 - –û–±–µ–¥\n‚Ä¢ 15:00 - –î–µ–Ω—å\n"
        "‚Ä¢ 17:00 - –í–µ—á–µ—Ä\n‚Ä¢ 23:00 - –ù–æ—á—å\n\n"
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start, /help - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã\n"
        "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/status - —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/next - —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/confirm - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è\n"
        "/test - —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "/hide - —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n"
        "/show - –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"
    )
    bot.reply_to(message, welcome_text, reply_markup=make_main_keyboard())
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª /start")


@bot.message_handler(commands=['about'])
def about_bot(message):
    about_text = (
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:\n\n"
        f"–ê–≤—Ç–æ—Ä: {BOT_AUTHOR}\n"
        f"–í–µ—Ä—Å–∏—è: {BOT_VERSION}\n"
        f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {BOT_PURPOSE}\n"
        f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: github.com/ALINASUSHCHENKO/tbotsimple\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å, "
        "–Ω–∞–ø–æ–º–∏–Ω–∞—è –ø–∏—Ç—å –≤–æ–¥—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."
    )
    bot.reply_to(message, about_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /about")


@bot.message_handler(commands=['ping'])
def ping_bot(message):
    try:
        start_time = time.time()

        sent_msg = bot.send_message(message.chat.id, "‚è≥ –ò–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥...")

        end_time = time.time()
        round_trip_time = round((end_time - start_time) * 1000, 2)

        api_start = time.time()
        bot.get_me()
        api_end = time.time()
        api_ping = round((api_end - api_start) * 1000, 2)

        ping_text = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏–Ω–≥–∞:\n\n"
            f"–ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {round_trip_time} –º—Å\n"
            f"–ü–∏–Ω–≥ –¥–æ API Telegram: {api_ping} –º—Å\n\n"
        )

        if round_trip_time < 200:
            quality = "–û—Ç–ª–∏—á–Ω–æ–µ"
        elif round_trip_time < 500:
            quality = "–•–æ—Ä–æ—à–µ–µ"
        elif round_trip_time < 1000:
            quality = "–°—Ä–µ–¥–Ω–µ–µ"
        else:
            quality = "–ü–ª–æ—Ö–æ–µ"

        ping_text += f"–ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {quality}"

        bot.edit_message_text(
            ping_text,
            message.chat.id,
            sent_msg.message_id
        )

        logger.info(f"Ping –æ—Ç {message.from_user.id}: {round_trip_time} –º—Å (API: {api_ping} –º—Å)")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∏–Ω–≥–∞: {e}"
        if 'sent_msg' in locals():
            bot.edit_message_text(error_msg, message.chat.id, sent_msg.message_id)
        else:
            bot.reply_to(message, error_msg)
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ –æ—Ç {message.from_user.id}: {e}")


@bot.message_handler(commands=['confirm'])
def confirm_action(message):
    confirm_text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    bot.send_message(
        message.chat.id,
        confirm_text,
        reply_markup=make_confirm_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm:'))
def handle_confirmation(call):
    choice = call.data.split(':', 1)[1]

    responses = {
        'yes': '–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!',
        'no': '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        'later': '–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é –ø–æ–∑–∂–µ.',
        'unsure': '–í–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ.'
    }

    bot.answer_callback_query(call.id, "–ü—Ä–∏–Ω—è—Ç–æ!")

    bot.edit_message_text(
        f"{responses.get(choice, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä')}",
        call.message.chat.id,
        call.message.message_id
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª: {choice}")


@bot.message_handler(commands=['subscribe'])
def subscribe_user(message):
    chat_id = message.chat.id
    if chat_id in subscribed_users:
        bot.reply_to(message, "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ!")
    else:
        subscribed_users.add(chat_id)
        bot.reply_to(message, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–¥–µ! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –≤ 9, 13, 15, 17 –∏ 23 —á–∞—Å–∞.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")


@bot.message_handler(commands=['unsubscribe'])
def unsubscribe_user(message):
    chat_id = message.chat.id
    if chat_id in subscribed_users:
        subscribed_users.remove(chat_id)
        bot.reply_to(message, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π..")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")


@bot.message_handler(commands=['status'])
def check_status(message):
    chat_id = message.chat.id
    if chat_id in subscribed_users:
        bot.reply_to(message, "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    else:
        bot.reply_to(message, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.")


@bot.message_handler(commands=['next'])
def next_reminder(message):
    next_time = scheduler.get_next_reminder_time()
    current_time = datetime.now()
    time_until = next_time - current_time

    hours = int(time_until.total_seconds() // 3600)
    minutes = int((time_until.total_seconds() % 3600) // 60)

    response = f"–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º –≤ {next_time.strftime('%H:%M')}"
    bot.reply_to(message, response)


@bot.message_handler(commands=['schedule'])
def show_schedule(message):
    schedule_text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n"
    for time_str in WATER_REMINDER_TIMES:
        if any(time_str.startswith(x) for x in ["09:", "13:", "15:", "17:", "23:"]):
            schedule_text += f"‚Ä¢ {time_str}\n"
        else:
            schedule_text += f"‚Ä¢ {time_str} (—Ç–µ—Å—Ç–æ–≤–æ–µ)\n"

    schedule_text += f"\n–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(subscribed_users)}"
    bot.reply_to(message, schedule_text)


@bot.message_handler(commands=['test'])
def test_reminder(message):
    scheduler.send_water_reminder()
    bot.reply_to(message, "–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")


@bot.message_handler(commands=['hide'])
def hide_keyboard(message):
    remove_keyboard = types.ReplyKeyboardRemove()
    bot.send_message(
        message.chat.id,
        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /show —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å.",
        reply_markup=remove_keyboard
    )


@bot.message_handler(commands=['show'])
def show_keyboard(message):
    bot.send_message(
        message.chat.id,
        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞:",
        reply_markup=make_main_keyboard()
    )


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, "–ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


if __name__ == "__main__":
    try:
        logger.info("–ó–ê–ü–£–°–ö –ë–û–¢–ê")

        bot_info = bot.get_me()
        logger.info(f"–ë–æ—Ç: {bot_info.first_name} (@{bot_info.username})")

        print("=" * 50)
        print("–ë–û–¢ –ó–ê–ü–£–©–ï–ù!")
        print("=" * 50)
        print(f"–ë–æ—Ç: {bot_info.first_name} (@{bot_info.username})")
        print(f"–í–µ—Ä—Å–∏—è: {BOT_VERSION}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
        print("  /ping - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞")
        print("  /confirm - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
        print("  /subscribe - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        print("–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã")
        print("–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ bot.log")
        print("Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 50)

        bot.infinity_polling(skip_pending=True, timeout=20)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()